{"version":3,"sources":["Components/ClimbingWindow.js","Components/ColorWindow.js","Components/ClimbingWall.js","Components/ClimbingWallList.js","App.js","reportWebVitals.js","index.js"],"names":["ClimbingWindow","colors","deleteColor","mappedCols","map","color","index","Button","onClick","style","ButtonGroup","height","colorMap","usableColors","numberToColorDict","Object","entries","forEach","_","number","illegalNeighbors","Set","add","ColorWindow","subArray","addColor","subArrayColors","reduce","a","b","concat","illegalNeighborsSubArray1","col","illegalNeighborsSubArray","illegalColors","filteredColors","filter","x","has","vertical","ClimbingWall","chosenColors","className","display","minWidth","ClimbingWallList","climbingWallColors","setClimbingWallColors","AddColor","i","newClimbingWalls","RemoveColor","delete","climbingWalls","from","Math","max","to","addColorFunc","deleteColorFunc","GetDeleteColorInWindowIFunction","slice","ListGroup","horizontal","App","useState","newWalls","disabled","length","pop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b87eed5.chunk.js","sourcesContent":["import { Button, ButtonGroup } from \"react-bootstrap\";\r\n\r\nconst ClimbingWindow = ({ colors, deleteColor }) => {\r\n    const colorMap = () => {\r\n        const mappedCols = [...colors].map((color, index) => {\r\n            return <Button onClick={() => { deleteColor(color) }} key={index} style={{ \"backgroundColor\": color }}> </Button >\r\n        })\r\n        return <ButtonGroup style={{ height: \"10rem\" }}> {mappedCols} </ButtonGroup>\r\n    }\r\n\r\n    return (\r\n        colorMap()\r\n    );\r\n}\r\n\r\nexport default ClimbingWindow;","import { Button, ButtonGroup } from \"react-bootstrap\";\r\nconst usableColors = ['green', 'blue', 'red', 'orange', 'black', 'white', 'purple', 'pink', 'yellow']\r\nconst colorDict = { 'white': 0, \"yellow\": 2, \"orange\": 4, \"red\": 5, \"pink\": 6, \"purple\": 8, \"blue\": 10, \"green\": 12, \"black\": 14 }\r\nconst numberToColorDict = {}\r\nObject.entries(colorDict).forEach(([color, number], _) => {\r\n    numberToColorDict[number] = color\r\n});\r\n\r\nconst illegalNeighbors = {}\r\nObject.entries(numberToColorDict).forEach(([number, color], _) => {\r\n    illegalNeighbors[color] = new Set()\r\n    if (numberToColorDict[number - 1]) {\r\n        illegalNeighbors[color].add(numberToColorDict[number - 1])\r\n    }\r\n    if (numberToColorDict[+number + +1]) {\r\n        illegalNeighbors[color].add(numberToColorDict[+number + +1])\r\n    }\r\n});\r\n\r\n\r\nconst ColorWindow = ({ subArray, addColor }) => {\r\n    const subArrayColors = new Set(subArray.reduce((a, b) => a.concat([...b]), []));\r\n    const illegalNeighborsSubArray1 = [...subArrayColors].map(col => illegalNeighbors[col])\r\n    const illegalNeighborsSubArray = new Set([...illegalNeighborsSubArray1].reduce((a, b) => a.concat([...b]), []));\r\n    const illegalColors = new Set([...subArrayColors, ...illegalNeighborsSubArray])\r\n    const filteredColors = [...usableColors].filter(x => !illegalColors.has(x))\r\n    const colorMap = () => {\r\n        const mappedCols = [...filteredColors].map((color, index) => <Button key={index} style={{ 'backgroundColor': color }\r\n        } onClick={() => { addColor(color) }}>  </Button >)\r\n        return <ButtonGroup vertical> {mappedCols} </ButtonGroup>\r\n    }\r\n    return (\r\n        colorMap()\r\n    );\r\n}\r\nexport default ColorWindow;","import ClimbingWindow from \"./ClimbingWindow\";\r\nimport ColorWindow from \"./ColorWindow\";\r\n\r\n\r\nfunction ClimbingWall({ subArray, chosenColors, addColor, deleteColor }) {\r\n    return (\r\n        <div className='mr-3'>\r\n            <span className=\"block-example border border-dark\" style={{ height: \"10rem\", display: \"inline-block\", minWidth: \"5rem\" }}>\r\n                <ClimbingWindow colors={chosenColors} deleteColor={deleteColor}></ClimbingWindow>\r\n            </span>\r\n\r\n            <div className=\"mt-3\">\r\n                <ColorWindow subArray={subArray} addColor={addColor}></ColorWindow>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ClimbingWall;","import { ListGroup } from \"react-bootstrap\";\r\nimport ClimbingWall from \"./ClimbingWall\";\r\nconst ClimbingWallList = ({ climbingWallColors, setClimbingWallColors }) => {\r\n    const GetAddColorToWindowIFunction = (i) => {\r\n        return function AddColorToChosenBox(color) {\r\n            return AddColor(i, color)\r\n        }\r\n    }\r\n    const AddColor = (i, color) => {\r\n        const newClimbingWalls = [...climbingWallColors]\r\n        newClimbingWalls[i].add(color)\r\n        setClimbingWallColors(newClimbingWalls)\r\n    }\r\n\r\n    const GetDeleteColorInWindowIFunction = (i) => {\r\n        return function DeleteColorInChosenWindow(color) {\r\n            return RemoveColor(i, color)\r\n        }\r\n    }\r\n    const RemoveColor = (i, color) => {\r\n        const newClimbingWalls = [...climbingWallColors]\r\n        newClimbingWalls[i].delete(color)\r\n        setClimbingWallColors(newClimbingWalls)\r\n    }\r\n\r\n    const climbingWalls = climbingWallColors.map((chosenColors, index) => {\r\n        const from = Math.max(0, index - 1)\r\n        const to = index + 2\r\n        const addColorFunc = GetAddColorToWindowIFunction(index)\r\n        const deleteColorFunc = GetDeleteColorInWindowIFunction(index)\r\n        return <ClimbingWall\r\n            subArray={climbingWallColors.slice(from, to)}\r\n            chosenColors={chosenColors}\r\n            addColor={addColorFunc}\r\n            deleteColor={deleteColorFunc}\r\n            key={index}\r\n        />\r\n    })\r\n    return (\r\n        <ListGroup horizontal>\r\n            {climbingWalls}\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default ClimbingWallList;","import { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport './App.css';\nimport ClimbingWallList from './Components/ClimbingWallList';\n\nfunction App() {\n  const [climbingWallColors, setClimbingWallColors] = useState([new Set()]);\n\n  const AddWall = () => {\n    const newWalls = [...climbingWallColors, new Set()]\n    setClimbingWallColors(newWalls)\n  }\n  const DeleteWall = () => {\n    const newWalls = [...climbingWallColors]\n    newWalls.pop()\n    setClimbingWallColors(newWalls)\n  }\n\n  return (\n\n    <div className=\"App\">\n      <div>\n        <Button onClick={AddWall} disabled={climbingWallColors.length > 4}> + </Button>\n        <Button onClick={DeleteWall} disabled={climbingWallColors.length <= 0}> - </Button>\n      </div>\n      <div className=\"d-flex justify-content-center mt-5\">\n        <ClimbingWallList climbingWallColors={climbingWallColors} setClimbingWallColors={setClimbingWallColors} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}